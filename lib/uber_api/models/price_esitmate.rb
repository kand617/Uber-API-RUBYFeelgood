# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module UberApi
  class PriceEsitmate < BaseModel
    # ISO 4217 currency code.
    # @return [String]
    attr_accessor :currency_code

    # Display name of product.
    # @return [String]
    attr_accessor :display_name

    # Expected activity distance (in miles).
    # @return [Float]
    attr_accessor :distance

    # Expected activity duration (in seconds). Always show duration in minutes.
    # @return [Integer]
    attr_accessor :duration

    # Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI.
    # @return [String]
    attr_accessor :estimate

    # Upper bound of the estimated price.
    # @return [Integer]
    attr_accessor :high_estimate

    # Lower bound of the estimated price.
    # @return [Integer]
    attr_accessor :low_estimate

    # Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
    # @return [String]
    attr_accessor :product_id

    # Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
    # @return [Float]
    attr_accessor :surge_multiplier

    # A mapping from model property names to API property names
    def self.names
      if @hash.nil?
        @hash = {}
        @hash["currency_code"] = "currency_code"
        @hash["display_name"] = "display_name"
        @hash["distance"] = "distance"
        @hash["duration"] = "duration"
        @hash["estimate"] = "estimate"
        @hash["high_estimate"] = "high_estimate"
        @hash["low_estimate"] = "low_estimate"
        @hash["product_id"] = "product_id"
        @hash["surge_multiplier"] = "surge_multiplier"
      end
      @hash
    end

    def initialize(currency_code = nil,
                   display_name = nil,
                   distance = nil,
                   duration = nil,
                   estimate = nil,
                   high_estimate = nil,
                   low_estimate = nil,
                   product_id = nil,
                   surge_multiplier = nil)
      @currency_code = currency_code
      @display_name = display_name
      @distance = distance
      @duration = duration
      @estimate = estimate
      @high_estimate = high_estimate
      @low_estimate = low_estimate
      @product_id = product_id
      @surge_multiplier = surge_multiplier
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        currency_code = hash["currency_code"]
        display_name = hash["display_name"]
        distance = hash["distance"]
        duration = hash["duration"]
        estimate = hash["estimate"]
        high_estimate = hash["high_estimate"]
        low_estimate = hash["low_estimate"]
        product_id = hash["product_id"]
        surge_multiplier = hash["surge_multiplier"]

        # Create object from extracted values
        PriceEsitmate.new(currency_code,
                          display_name,
                          distance,
                          duration,
                          estimate,
                          high_estimate,
                          low_estimate,
                          product_id,
                          surge_multiplier)
      end
    end
  end
end
