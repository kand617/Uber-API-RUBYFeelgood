# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

require_relative 'error_base'

module UberApi
  class Request < ErrorBase 
    # The object that contains driver details.
    # @return [Array<String, Object>]
    attr_accessor :driver

    # The estimated time of vehicle arrival in minutes.
    # @return [Integer]
    attr_accessor :eta

    # The object that contains the location information of the vehicle and driver
    # @return [Array<String, Object>]
    attr_accessor :location

    # The unique ID of the Request.
    # @return [String]
    attr_accessor :request_id

    # The status of the Request indicating state.
    # @return [String]
    attr_accessor :status

    # The surge pricing multiplier used to calculate the increased price of a Request. A multiplier of 1.0 means surge pricing is not in effect.
    # @return [Float]
    attr_accessor :surge_multiplier

    # The object that contains vehicle details.
    # @return [Array<String, Object>]
    attr_accessor :vehicle

    # A mapping from model property names to API property names
    def self.names
      if @hash.nil?
        @hash = {}
        @hash["driver"] = "driver"
        @hash["eta"] = "eta"
        @hash["location"] = "location"
        @hash["request_id"] = "request_id"
        @hash["status"] = "status"
        @hash["surge_multiplier"] = "surge_multiplier"
        @hash["vehicle"] = "vehicle"
        @hash = super().merge(@hash) 
      end
      @hash
    end

    def initialize(driver = nil,
                   errors = nil,
                   eta = nil,
                   location = nil,
                   meta = nil,
                   request_id = nil,
                   status = nil,
                   surge_multiplier = nil,
                   vehicle = nil)
      @driver = driver
      @eta = eta
      @location = location
      @request_id = request_id
      @status = status
      @surge_multiplier = surge_multiplier
      @vehicle = vehicle

      # Call the constructor of the base class
      super(errors,
            meta)
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        driver = hash["driver"]
        # Parameter is an array, so we need to iterate through it
        errors = nil
        if hash["errors"] != nil
          errors = Array.new
          hash["errors"].each{|structure| errors << (Errors.from_hash(structure) if structure)}
        end
        eta = hash["eta"]
        location = hash["location"]
        meta = hash["meta"]
        request_id = hash["request_id"]
        status = hash["status"]
        surge_multiplier = hash["surge_multiplier"]
        vehicle = hash["vehicle"]

        # Create object from extracted values
        Request.new(driver,
                    errors,
                    eta,
                    location,
                    meta,
                    request_id,
                    status,
                    surge_multiplier,
                    vehicle)
      end
    end
  end
end
